{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf810
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red255\green255\blue255;\red194\green0\blue255;
\red193\green101\blue28;\red45\green150\blue30;\red105\green103\blue149;}
{\*\expandedcolortbl;;\csgray\c0;\csgray\c100000;\cssrgb\c81452\c23168\c100000;
\cssrgb\c80553\c47366\c13835;\cssrgb\c20459\c63760\c15349;\cssrgb\c48831\c48617\c65035;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}}
\margl1440\margr1440\vieww13140\viewh10040\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \
Lecture 4 Highlights\
\
Swift has the following types of types:\
\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls1\ilvl0\cf0 {\listtext	\'95	}tuple\
{\listtext	\'95	}function/closure\
{\listtext	\'95	}enum\
{\listtext	\'95	}struct\
{\listtext	\'95	}class\
{\listtext	\'95	}protocol\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
functions are "syntactic sugar" to give closures a name.  Alternatively closures are functions which don't have a name\
\
ANY of the types of types can be passed as an argument to a function or returned from a function. I.e functions can take enums, structs, functions, etc as arguments and can return a tuple struct, enum, function etc as a return value.\
\
We learned about several different types in Lecture 3: Int, String, Bool, Double, Range, CountableRange, Array and Dictionary.  It turns out that all of these types are of type struct.\
\
Range, CountableRange, Array and Dictionary are parameterized with some other types, forming a new type.  That is Array<Int> (alternatively denoted: [Int] )is not the same thing as Array<String> (aka: [String] ).  Those are two distinct types and are not interchangeable.  This is very important. \
\
functions can be added to enum, struct and class.  These functions are then invoked by saying something like: \
\
aString.append(someOtherString) . \
\
In this case, append is a function which has been added to String.  It takes a String as it's only argument and returns another String composed of what you would expect.\
  \
You should be familiar with the all of the different ways that closures and functions can be specified.  You should pay particular attention to passing functions to other functions using "trailing closure syntax".  (learn-swift Playgrounds 6 & 7)\
\
The best ways to understand functions as arguments to other functions and trailing closure syntax is understanding the map and reduce functions on types that conform to the Sequence protocol.  Many things can be a Sequence, the particular ones you already know are: CountableRange, Array and Dictionary.  \
\
reduce recurses through a Sequence of values of some type (call that type T) and produces a single value of of some type, (call that type U)  It works by accepting as arguments some initial value of type U and a closure which accepts two arguments, the first is of type U and the second is of type T.  That closure must return a value of type U. It loops through all the values of the Sequence, one at a time.\
\
Here is a simplified version of how Swift implements reduce on an Array. Element is the type of object held in the Array, Result is the type you specify.  You can write your own version of exactly this:\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f1\fs22 \cf2 \cb3 \CocoaLigature0   \cf4 func\cf2  \cf5 reduce\cf2 <\cf6 Result, Element\cf2 >( \
	\cf5 initialResult\cf2 : \cf6 Result\cf2 ,\
    \cf5 nextPartialResult\cf2 : (\cf5 partialResult\cf2 : \cf6 Result, Element\cf2 ) -> \cf6 Result\cf2 ) -> \cf6 Result\cf2  \{\
    \cf4 var\cf2  \cf5 accumulator\cf2  = \cf5 initialResult\cf2 \
    \cf4 for\cf2  \cf5 element\cf2  \cf4 in\cf2  \cf4 self\cf2  \{\
      \cf5 accumulator\cf2  = \cf5 nextPartialResult\cf2 (\cf5 accumulator\cf2 , \cf5 element\cf2 )\
    \}\
    \cf4 return\cf2  \cf5 accumulator\cf2 \
  \}\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \cb1 \CocoaLigature1 \
\
Here is a simplified version of how Swift implements map. You can write your own:\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f1\fs22 \cf4 \cb3 \CocoaLigature0 func\cf2  \cf5 map\cf2 <\cf6 T\cf2 >(\cf5 _\cf2  \cf5 transform\cf2 : (\cf6 Element\cf2 ) -> \cf6 T\cf2 ) -> [\cf6 T\cf2 ] \{\
    \cf4 let\cf2  \cf5 count\cf2  = \cf4 self\cf2 .\cf5 count\cf2 \
\
    \cf4 if\cf2  \cf5 count\cf2  == \cf7 0\cf2  \{\
      \cf4 return\cf2  []\
    \}\
\
    \cf4 var\cf2  \cf5 result\cf2  = \cf6 Array\cf2 <\cf6 T\cf2 >()\
\
    \cf4 for\cf2  \cf5 i\cf2  \cf4 in\cf2  \cf7 0 \cf2 ..< \cf5 count\cf2  \{\
      \cf5 result\cf2 .\cf5 append\cf2 (\cf5 transform\cf2 (\cf4 self\cf2 [\cf5 i\cf2 ]))\
    \}\
\
    \cf4 return\cf2  \cf5 result\cf2 \
\}\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \cb1 \CocoaLigature1 \
As you can tell, map and reduce are just particular wrappers around a for loop.  The forms are very general and save you having to write the obscuring boilerplate with every for loop you implement.\
\
You should review learn-swift Playgrounds 8-12 to learn about enums, structs and classes.  Of particular importance for Assignment 2 is Playground 12 on subscripts.\
\
You will want to review Playground 25 for more examples of using map/reduce like constructs especially in a chained manner.\
\
Note the following from Assignment 2:\
\
\pard\tx220\tx720\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\li720\fi-720\sl264\slmult1\slleading40\pardirnatural\qj\partightenfactor0
\ls2\ilvl0\cf2 {\listtext	\'95	}Type Aliases\cf0 \
\ls2\ilvl0\cf2 {\listtext	\'95	}Base operations, in particular the modulo and ternary operators\cf0 \
\ls2\ilvl0\cf2 {\listtext	\'95	}Base data types, in particular Int and Tuple\cf0 \
\ls2\ilvl0\cf2 {\listtext	\'95	}Arrays and Arrays of Arrays\cf0 \
\ls2\ilvl0\cf2 {\listtext	\'95	}Basic control flow including: if, guard and switch\cf0 \
\ls2\ilvl0\cf2 {\listtext	\'95	}Why and when we avoid the use of "for" as a control flow mechanism and use functional constructs instead\cf0 \
\ls2\ilvl0\cf2 {\listtext	\'95	}The Swift types: enum, struct and class and their syntax, differences and similarities\cf0 \
\ls2\ilvl0\cf2 {\listtext	\'95	}Properties of enums, structs and classes\cf0 \
\ls2\ilvl0\cf2 {\listtext	\'95	}Subscripts on structs and classes\cf0 \
\ls2\ilvl0\cf2 {\listtext	\'95	}Functions and in particular higher order functions which take closures as arguments\cf0 \
\ls2\ilvl0\cf2 {\listtext	\'95	}Closures and in particular their capture rules and the trailing closure syntax\cf0 \
\ls2\ilvl0\cf2 {\listtext	\'95	}How to read the signature and therefore the type of a func or closure\cf0 \
\ls2\ilvl0\cf2 {\listtext	\'95	}Parameterized types (aka Generics) and their uses\cf0 \
\ls2\ilvl0\cf2 {\listtext	\'95	}Optional types and why they are genericized enums\cf0 \
\ls2\ilvl0\cf2 {\listtext	\'95	}The if-let and guard-let constructs\cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
At this point you have seen me work with all but the last 3.  Which we will do in Lecture 5.  If you are unsure of any features about the topics above, I encourage you to review the appropriate portion of the Swift book, the corresponding learn-swift playground, and then to ask in the Discussion groups on Canvas.\
\
}