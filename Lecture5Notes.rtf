{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf810
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red255\green255\blue255;\red194\green0\blue255;
\red193\green101\blue28;\red45\green150\blue30;\red105\green103\blue149;\red170\green13\blue145;\red0\green0\blue0;
\red63\green110\blue116;\red38\green71\blue75;\red46\green13\blue110;\red196\green26\blue22;}
{\*\expandedcolortbl;;\csgray\c0;\csgray\c100000;\cssrgb\c81452\c23168\c100000;
\cssrgb\c80553\c47366\c13835;\cssrgb\c20459\c63760\c15349;\cssrgb\c48831\c48617\c65035;\csgenericrgb\c66500\c5200\c56900;\csgenericrgb\c0\c0\c0;
\csgenericrgb\c24700\c43100\c45600;\csgenericrgb\c14900\c27800\c29400;\csgenericrgb\c18100\c5200\c43100;\csgenericrgb\c77000\c10200\c8600;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid201\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid3}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}}
\margl1440\margr1440\vieww25220\viewh14900\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \
Lecture 5 Highlights\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\b \cf0 Things that people ALWAYS have problems with
\b0 :\
\
1) The Swift Type System\
2) Closure Passing Style (especially Trailing Closure Syntax)\
3) Protocols\
4) Syntax of Optional\
5) Value and Reference Types\
6) Notifications between M/V/C components\
and sometimes:\
7) Generics\
\
After tonight, you should be familiar with all but 5 and 6, which will touch on in future lectures.\
\

\b Quick reiteration: Swift has the following types of types:
\b0 \
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls1\ilvl0\cf0 {\listtext	\'95	}tuple\
{\listtext	\'95	}function/closure\
{\listtext	\'95	}enum\
{\listtext	\'95	}struct\
{\listtext	\'95	}class\
{\listtext	\'95	}protocol\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
\
All can be specified as types of arguments to functions.\
You are responsible for understanding what each does.\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\b \cf0 Tonight's topics
\b0 :\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls2\ilvl0\cf0 {\listtext	\'95	}Protocols\
{\listtext	\'95	}Generics\
{\listtext	\'95	}Optionals (which are just a generic enum)\
{\listtext	\'95	}If-let and Guard-let for de-Optionalization\
{\listtext	\'95	}Review of all topics for Assignment 2\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\b \cf0 Protocols
\b0 :\
Swift's "abstract" type.  Review the learn-swift playground for more detail.\
\

\b Generics
\b0 :\
\
 Key take away point\
is that things inside the <> are type parameters.  Generic types form concrete types only at the point\
in the code where you fill in the required type parameters.  Every different combination of \
a generic type and its type parameters is a completely different type.\
\
See the learn-swift section on Generics for more detail\
\
Here's a simplified version of the actual implementation of reduce for Array.   Note how nothing\
in the function makes any assumptions about the types of Result or Element.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f1\fs22 \cf2 \cb3 \CocoaLigature0   \cf4 func\cf2  \cf5 reduce\cf2 <\cf6 Result, Element\cf2 >( \
	\cf5 initialResult\cf2 : \cf6 Result\cf2 ,\
    \cf5 nextPartialResult\cf2 : (\cf5 partialResult\cf2 : \cf6 Result, Element\cf2 ) -> \cf6 Result\cf2 ) -> \cf6 Result\cf2  \{\
    \cf4 var\cf2  \cf5 accumulator\cf2  = \cf5 initialResult\cf2 \
    \cf4 for\cf2  \cf5 element\cf2  \cf4 in\cf2  \cf4 self\cf2  \{\
      \cf5 accumulator\cf2  = \cf5 nextPartialResult\cf2 (\cf5 accumulator\cf2 , \cf5 element\cf2 )\
    \}\
    \cf4 return\cf2  \cf5 accumulator\cf2 \
  \}\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \cb1 \CocoaLigature1 \
\
Here is a simplified version of how Swift implements map. You can write your own:\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f1\fs22 \cf4 \cb3 \CocoaLigature0 func\cf2  \cf5 map\cf2 <\cf6 T\cf2 >(\cf5 _\cf2  \cf5 transform\cf2 : (\cf6 Element\cf2 ) -> \cf6 T\cf2 ) -> [\cf6 T\cf2 ] \{\
    \cf4 let\cf2  \cf5 count\cf2  = \cf4 self\cf2 .\cf5 count\cf2 \
\
    \cf4 if\cf2  \cf5 count\cf2  == \cf7 0\cf2  \{\
      \cf4 return\cf2  []\
    \}\
\
    \cf4 var\cf2  \cf5 result\cf2  = \cf6 Array\cf2 <\cf6 T\cf2 >()\
\
    \cf4 for\cf2  \cf5 i\cf2  \cf4 in\cf2  \cf7 0 \cf2 ..< \cf5 count\cf2  \{\
      \cf5 result\cf2 .\cf5 append\cf2 (\cf5 transform\cf2 (\cf4 self\cf2 [\cf5 i\cf2 ]))\
    \}\
\
    \cf4 return\cf2  \cf5 result\cf2 \
\}\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \cb1 \CocoaLigature1 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\b \cf0 Optionals\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\b0 \cf0 Technique used when it's possible that some variable can have no value\
No value has a special term in Swift, it's nil.  which is a key word\
Optionals are so important they have special syntactical support\
However, they are _JUST_ a generic enum that is known to the compiler, there is NOTHING else special about them
\b \

\b0 \
Here is a simplified version of Swift's Optional\
\
\pard\tx543\pardeftab543\pardirnatural\partightenfactor0

\f1\fs22 \cf8 \CocoaLigature0 public\cf9  \cf8 enum\cf9  Optional<Wrapped> \{\
    \cf8 case\cf9  none\
    \cf8 case\cf9  some(\cf10 Wrapped\cf9 )\
    \
    \cf8 public\cf9  \cf8 init\cf9 (\cf8 _\cf9  some: \cf10 Wrapped\cf9 ) \{ \cf8 self\cf9  = .\cf11 some\cf9 (some) \}\
    \cf8 public\cf9  \cf8 init\cf9 (nilLiteral: ()) \{ \cf8 self\cf9  = .\cf11 none\cf9  \}\
    \
    \cf8 public\cf9  \cf8 var\cf9  unwrapped: \cf10 Wrapped\cf9  \{\
        \cf8 get\cf9  \{\
            \cf8 switch\cf9  \cf8 self\cf9  \{\
            \cf8 case\cf9  .\cf11 some\cf9 (let wrapped): \cf8 return\cf9  wrapped\
            \cf8 case\cf9  .\cf11 none\cf9 : \cf12 preconditionFailure\cf9 (\cf13 "unsafelyUnwrapped of nil optional"\cf9 )\
            \}\
        \}\
    \}\
\}\
\
Optional<String> is completely equivalent to String?\
ImplicitlyUnwrappedOptional<String> is completely equivalent to String!\
\
use as, as? and as! to force a type change\
use is to determine type\
\
Optionals can be "chained" with ? or !  example:\
someStruct?.theString?.description\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \CocoaLigature1 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\b \cf0 if-let, guard-let
\b0 :\
used for removing optionals\
\

\b Review of Swift:
\b0 \
Note the following from Assignment 2:\
\
\pard\tx220\tx720\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\li720\fi-720\sl264\slmult1\slleading40\pardirnatural\qj\partightenfactor0
\ls3\ilvl0\cf2 {\listtext	\'95	}Type Aliases\cf0 \
\ls3\ilvl0\cf2 {\listtext	\'95	}Base operations, in particular the modulo and ternary operators\cf0 \
\ls3\ilvl0\cf2 {\listtext	\'95	}Base data types, in particular Int and Tuple\cf0 \
\ls3\ilvl0\cf2 {\listtext	\'95	}Arrays and Arrays of Arrays\cf0 \
\ls3\ilvl0\cf2 {\listtext	\'95	}Basic control flow including: if, guard and switch\cf0 \
\ls3\ilvl0\cf2 {\listtext	\'95	}Why and when we avoid the use of "for" as a control flow mechanism and use functional constructs instead\cf0 \
\ls3\ilvl0\cf2 {\listtext	\'95	}The Swift types: enum, struct and class and their syntax, differences and similarities\cf0 \
\ls3\ilvl0\cf2 {\listtext	\'95	}Properties of enums, structs and classes\cf0 \
\ls3\ilvl0\cf2 {\listtext	\'95	}Subscripts on structs and classes\cf0 \
\ls3\ilvl0\cf2 {\listtext	\'95	}Functions and in particular higher order functions which take closures as arguments\cf0 \
\ls3\ilvl0\cf2 {\listtext	\'95	}Closures and in particular their capture rules and the trailing closure syntax\cf0 \
\ls3\ilvl0\cf2 {\listtext	\'95	}How to read the signature and therefore the type of a func or closure\cf0 \
\ls3\ilvl0\cf2 {\listtext	\'95	}Parameterized types (aka Generics) and their uses\cf0 \
\ls3\ilvl0\cf2 {\listtext	\'95	}Optional types and why they are genericized enums\cf0 \
\ls3\ilvl0\cf2 {\listtext	\'95	}The if-let and guard-let constructs\cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
At this point you have seen me work with all but the last 3.  Which we will do in Lecture 5.  If you are unsure of any features about the topics above, I encourage you to review the appropriate portion of the Swift book, the corresponding learn-swift playground, and then to ask in the Discussion groups on Canvas.\
\
}